{"version":3,"sources":["components/Header.js","components/TaskEntry.js","components/Task.js","components/TaskList.js","service/tasks.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","style","styles","header","React","Component","color","textDecoration","textAlign","TaskEntry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","taskDescription","onSaveClicked","bind","assertThisInitialized","onTaskTextFieldUpdated","taskToBeAdded","completed","onSaveTaskHandler","setState","event","description","target","value","className","type","onChange","onClick","Task","taskRow","taskId","paddingTop","paddingBottom","TaskList","tasks","map","task","i","components_Task","key","TasksService","getTasks","_getTasks","asyncToGenerator","regenerator_default","mark","_callee","res","data","wrap","_context","prev","next","axios","get","sent","abrupt","stop","apply","arguments","saveTask","_saveTask","_callee2","_context2","post","_x","App","addTask","response","insertId","currentListOfTasks","push","components_Header","components_TaskEntry","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9eb0e16.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n\n    render() {\n        return (<h1 style={styles.header}>ToDo App</h1>);\n    }\n\n}\n\nconst styles = {\n    header : {\n        color: \"blue\",\n        textDecoration: \"underline\",\n        textAlign: \"center\"\n    }\n};\n\nexport default Header;","import React from 'react';\n\nclass TaskEntry extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            taskDescription: \"\"\n        };\n\n        // Event binding functions\n        this.onSaveClicked = this.onSaveClicked.bind(this);\n        this.onTaskTextFieldUpdated = this.onTaskTextFieldUpdated.bind(this);\n    }\n\n    // This function fires when the save button is clicked\n    onSaveClicked() {\n\n        const taskToBeAdded = {\n            taskDescription: this.state.taskDescription,\n            completed: false\n        };\n\n        this.props.onSaveTaskHandler(taskToBeAdded);\n\n        // Bit of usability we clear out text field after adding\n        this.setState({\n            taskDescription: \"\"\n        });\n    }\n\n    // This function fires when the text box is changed\n    onTaskTextFieldUpdated(event) {\n        const description = event.target.value;\n\n        this.setState({\n            taskDescription: description\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col\">\n                    <input type=\"text\" value={this.state.taskDescription} onChange={this.onTaskTextFieldUpdated} />\n                </div>\n                <div className=\"col\">\n                    <input type=\"button\" value=\"Save\" onClick={this.onSaveClicked} />\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default TaskEntry;","import React from 'react';\n\nclass Task extends React.Component {\n\n    render() {\n        return (\n            <div className=\"row\" style={styles.taskRow}>\n                <div className=\"col\">\n                    {this.props.taskId} - {this.props.taskDescription}\n                </div>\n                <div className=\"col\">\n                    <input type=\"button\" value=\"Delete\" />\n                </div>\n                <div className=\"col\">\n                    <input type=\"button\" value=\"Done\" />\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst styles = {\n    taskRow: {\n        paddingTop: \"10px\",\n        paddingBottom: \"10px\"\n    }\n}\n\nexport default Task;","import React from 'react';\n\nimport Task from './Task';\n\nclass TaskList extends React.Component {\n\n    render() {\n\n        return (\n            <div>\n                {\n                    this.props.tasks.map((task, i) => \n                        <Task taskId={task.taskId} taskDescription={task.taskDescription} key={i} />\n                    )\n                }\n            </div>\n        );\n    }\n\n}\n\nexport default TaskList;","import axios from 'axios';\n\nconst TasksService = {\n    async getTasks() {\n        let res = await axios.get(\"https://11v3zrxbag.execute-api.eu-west-2.amazonaws.com/dev/tasks\");\n        let data = await res.data;\n        return data;\n    },\n\n    async saveTask(task) {\n        let res = await axios.post(\"https://11v3zrxbag.execute-api.eu-west-2.amazonaws.com/dev/tasks\", task);\n        return res.data;\n    }\n};\n\nexport default TasksService;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport TaskEntry from './components/TaskEntry';\nimport TaskList from './components/TaskList';\nimport TasksService from './service/tasks';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tasks: []\n    };\n\n    this.addTask = this.addTask.bind(this);\n  }\n\n  async componentDidMount() {\n    const tasks = await TasksService.getTasks();\n    this.setState({tasks: tasks});\n  }\n\n  async addTask(task) {\n\n    const response = await TasksService.saveTask(task);\n\n    task.taskId = response.insertId;\n\n    let currentListOfTasks = this.state.tasks;\n    currentListOfTasks.push(task);\n    this.setState({\n      tasks: currentListOfTasks\n    });\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <TaskEntry onSaveTaskHandler={this.addTask} />\n        <TaskList tasks={this.state.tasks} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}